curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
helm version
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm repo update
kubectl create namespace prometheus

helm install stable prometheus-community/kube-prometheus-stack -n prometheus

helm install prometheus-stack prometheus-community/kube-prometheus-stack \
  --namespace prometheus --create-namespace \
  --set prometheus.prometheusSpec.maximumStartupDurationSeconds=300

kubectl edit svc stable-kube-prometheus-sta-prometheus -n prometheus    


kube ctl 

 curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x kubectl
    sudo mv kubectl /usr/local/bin/


aws cli 

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
helm install prometheus prometheus-community/prometheus



argo cd 

kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml


aws eks update-cluster-config   --region us-east-2   --name abhi-eks-72gPRGqR   --resources-vpc-config endpointPublicAccess=true,publicAccessCidrs=0.0.0.0/0





kubectl create namespace argocd
   43  cd
   44  kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
   45  kubectl get pods -n argocd
   46  kubectl get svc -n argocd
   47  kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
   48  kubectl get svc -n argocd
   49  kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
   50  history
   51   kubectl get pods -n argocd
   52  kubectl get svc -n argocd
   53  kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
   54  history


   premotheus gafana

   https://medium.com/@gayatripawar401/deploy-prometheus-and-grafana-on-kubernetes-using-helm-5aa9d4fbae66






   jenkins plugins

   jdk eclipse

   maven 
   config file provider
   pipeline maven intigration
   Artifactory
   vilations
   sonar qube scanner
   docker 
   docker pipeline 
   kubernetes
   kubernetes cli
   kubernetes client APi
   kubernetes Credentials


   pipeline {
    agent any
    tools {
        maven 'maven'
    }
    environment {
        SCANNER_HOME = tool 'sonar'
    }
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/Mani137/E-commerce.git'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(installationName: 'sonar') {
                    sh '''
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName=meesho \
                        -Dsonar.projectKey=meesho \
                        -Dsonar.java.binaries=.
                    '''
                }
            }
            
        }
    }
}



service.yaml
kubectl create ns webapps
kubectl apply -f svc.yaml


role.yaml

kubectl apply -f role.yaml

bind.yaml
kubectl apply -f bind.yaml


apiVersion: v1
kind: Secret
type: kubernetes.io/service-account-token
metadata:
  name: mysecretname
  annotations:
    kubernetes.io/service-account.name: myserviceaccount

create token
token.yaml
kubectl apply -f token.yaml -n webapps
kubectl describe secret mysecretname -n webapps

